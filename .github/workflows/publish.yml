# .github/workflows/publish.yml
name: publish

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    tags:
      - 'v*'    # on publiera PyPI seulement si le tag est stable et attaché à main (voir garde-fou)

permissions:
  contents: read
  id-token: write

jobs:
  # =========================
  # Dev -> TestPyPI
  # =========================
  publish-testpypi:
    runs-on: ubuntu-latest
    environment: testpypi
    if: github.ref_type == 'branch' && github.ref_name == 'dev'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Upgrade build tooling
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build twine
      - name: Clean dist
        run: rm -rf dist
      - name: Build sdist & wheel
        run: python -m build
      - name: Ensure pre-release version (dev/a/b/rc)
        run: |
          VERSION=$(python - <<'PY'
          import importlib.metadata as m, sys, pathlib
          # essaie pyproject.toml via setuptools_scm/poetry/PEP 621 ; sinon fallback package
          # simple heuristique : lit version depuis dist metadata
          import os, glob, zipfile
          whls = glob.glob("dist/*.whl")
          if not whls: sys.exit("No wheel built")
          namever = os.path.basename(whls[0]).split('-')[1]
          print(namever)
          PY
          )
          echo "Version: $VERSION"
          python - <<PY
          import re, os, sys
          v = os.environ["VERSION"]
          if not re.search(r'(a|b|rc|dev)\d*', v):
              print(f"ERROR: {v} n'est pas une pré-release (attendu .devN, aN, bN ou rcN).")
              sys.exit(1)
          PY
      - name: Twine check
        run: python -m twine check dist/*
      - name: Publish to TestPyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  # =========================
  # Tag -> PyPI (stable)
  # =========================
  publish-pypi:
    runs-on: ubuntu-latest
    environment: pypi   # fais correspondre au nom configuré côté PyPI, ou supprime la ligne si aucun
    if: |
      github.ref_type == 'tag' &&
      startsWith(github.ref_name, 'v') &&
      !contains(github.ref_name, '-')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # nécessaire pour la vérification "tag sur main"
      - name: Verify tag is on main
        run: |
          git fetch origin main
          if ! git merge-base --is-ancestor origin/main "$GITHUB_SHA"; then
            echo "Le tag n'est pas attaché à main → abandon."
            exit 1
          fi
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Upgrade build tooling
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build twine
      - name: Clean dist
        run: rm -rf dist
      - name: Build sdist & wheel
        run: python -m build
      - name: Get version
        id: getver
        run: |
          VERSION=$(python - <<'PY'
          import os, glob
          whl = sorted(glob.glob("dist/*.whl"))[0]
          print(os.path.basename(whl).split('-')[1])
          PY
          )
              echo "VERSION=$VERSION" >> "$GITHUB_ENV"

          - name: Ensure pre-release
            run: |
              python - <<'PY'
          import os, re, sys
          v = os.environ["VERSION"]
          print("Version:", v)
          if not re.search(r'(a|b|rc|dev)\d*', v):
              print(f"ERROR: {v} n'est pas une pré-release")
              sys.exit(1)
          PY
      - name: Twine check
        run: python -m twine check dist/*
      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        # pas de repository-url → PyPI prod
